package guess;

import webil.ui.*;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class GuessNumber authority (*) {
    public final label{*<-*} lb = new label{*->Client}; 
    private Text[lb, lb]{*->Client} message;
    private Panel[lb, lb]{*->Client} guesses;
    public NumberTextBox[{*->Client}, {*->Client}]{*->Client} guessbox;
    private Button[lb, lb]{*->Client} button;
    private Button[lb, lb]{*->Client} newGame;
    Panel[lb, lb]{*->Client} mainPanel;

    private int{*->Client; *<-*} secret;
    int{*->Client; *<-*} tries;

    public GuessNumber{*->Client}()
    {
        message = new Text("");
        guessbox = new NumberTextBox();
        button = new Button("Guess");
        newGame = new Button("New Game");
        Button{*->Client} b = button;
        Button{*->Client} ng = newGame;
        mainPanel = RootPanel.getRootPanel(Client);
        GuessListener guessLi = new GuessListener(this);
        if (b != null) b.addListener(guessLi);
        NewGameListener ngLi = new NewGameListener(this);
        if (ng != null) ng.addListener(ngLi);
    }

    /**
     * This is the entry point method.
     */
    public static void main{*->Client}() 
        where authority(*), endorse({*->Client; *<-*})
    {
        final GuessNumber gn = new GuessNumber();

        gn.newGame();
    }

    void newGame{*->Client}() 
        where authority (*), endorse ({*->Client; *<-*})
    {
        this.tries = 3;
        secret = new java.util.Random().nextInt(10) + 1;
        constructAddControls();
    }

    void makeGuess{*->Client}(Integer{*->Client} s)
        where authority (*), endorse ({*->Client; *<-*})
    {
        int i = 0;

		Integer{*->Client} ts = s;
		if (ts != null) {
			i = ts.intValue();
		}

        endorse(i, {*->Client; *<-*}) { 
            if (i >= 1 && i <= 10) {
                if (i == secret && this.tries > 0) {
                    declassify ({*->Client; *<-*}) {
                        this.tries = 0;
                        finishApp("Bingo. You Win!");
                    }
                }
                else {
                    declassify ({*->Client; *<-*}) {
                        this.tries = this.tries - 1;
                        if (this.tries > 0) {
                            Text{*->Client} m = message;
                            Panel{*->Client} g = guesses;
                            if (m != null && g != null) {
                                m.setText("Try again");
                                g.addChild(lb, lb,
                                    new Text(Integer.toString(i)));
                            }
                        } else {
                            finishApp("Sorry! Tries Exhausted. Game Over");
                        }
                    }
                }
            }
            else {
                Text{*->Client} m = message;
                if (m != null) {
                    m.setText("Number out of Range");
                }
            }
        }
    }   

    void finishApp{*->Client}(String{*->Client} s)
    {
        final Panel{*->Client} mp = this.mainPanel;
        if (mp != null) {
            mp.removeAllChildren();
            mp.addChild(lb, lb, new Text(s));
            mp.addChild(lb, lb, newGame);
        }
    }

    private void constructAddControls{*->Client}()
    {
        HorizontalPanel input;
        VerticalPanel controls;

        guesses = new VerticalPanel();
        input = new HorizontalPanel();
        input.addChild(lb, lb, guessbox);
        input.addChild(lb, lb, button);
        input.addChild(lb, lb, new Text(" "));
        
        final Text m = message;
        
        if (m != null) {
            m.setText("");
        }
        
        input.addChild(lb, lb, message);

        controls = new VerticalPanel();
        controls.addChild(lb, lb,
            new Text("Enter a number between 1 and 10"));
        controls.addChild(lb, lb, 
            new Text("You are allowed " + tries + " tries."));
        controls.addChild(lb, lb, input);
        controls.addChild(lb, lb, guesses);
        controls.addChild(lb, lb, newGame);

        final Panel{*->Client} mp = this.mainPanel;
        
        if (mp != null) {
            mp.removeAllChildren();
            mp.addChild(lb, lb, controls);     
        }
    }
}

class GuessListener implements ClickListener[{*->Client}, {*->Client}]
{
    final GuessNumber{*->Client} guessApp;

    public GuessListener{*->Client}(GuessNumber{*->Client} g) 
    {
        this.guessApp = g;
    }

    public void onClick{*->Client} (
        Widget[{*->Client}, {*->Client}]{*->Client} w)
    {
        if (this.guessApp != null) {
           NumberTextBox[{*->Client}, {*->Client}]{*->Client} tb = guessApp.guessbox;
           if (tb != null) {
               guessApp.makeGuess(tb.getInteger());
               tb.setText("");
               tb.setFocus(true);
           }
        }
    }
}

class NewGameListener 
    implements ClickListener[{*->Client}, {*->Client}]
{
    final GuessNumber{*->Client} guessApp;

    public NewGameListener{*->Client}(GuessNumber{*->Client} g) {
        this.guessApp = g;
    }

    public void onClick{*->Client}(
        Widget[{*->Client}, {*->Client}]{*->Client} w) 
    {
        if (guessApp != null) {
            guessApp.newGame();
        }
    }
}
